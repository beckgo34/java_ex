package memo;

public class OOP {
    /**
     * 객체지향 프로그래밍(OOP, Object Oriented Programming)
     *  * 절차지향 프로그래밍의 단점 극복
     *      ' 동일한 목적을 갖는 코드를 여러 번 반복 => 반복될 수록 전체 코드의 양이 많아짐.
     *      '여러 번 반복되는 코드를 수정하는 경우 모두 고쳐야함.
     *      ' 표현의 한계
     *          - 학생의 정보를 다루고 싶은데 어떻게 표현할까?
     *  * 객체지향 프로그래밍
     *      ' 다루고 싶은 정보를 클래스(class)로 표현할 수 있음.
     *      ' 그 대상이 가지고 있는 상세 정보는 클래스 내에 필드(field)로 표현
     *      ' 예) 학생의 이름, 학과, 전호번호를 표현한다면
     *          //학생을 표한하기 위한 클래스
     *          public class Student{
     *              //학생의 구체적인 정보를 위한 필드
     *              String studentName;
     *              String studentMajor;
     *              String studentMobile;
     *          }
     *       ' 실제 학생의 구체적 데이터를 다루기 위해선 해당 클래스에 대한 객체(인스턴스)를 선언하여 정보를 담아야 함.
     *          // Student 클래스가 아닌 다른 클래스
     *          Student student1 = new Student();
     *          student1.studentName = "이름1";
     *          student1.studentMajor = "컴퓨터공학";
     *          student1.studentMobile = "010-1234-5678";
     *
     *       1.클래스(Class)
     *         a. 클래스의 3요소(3가지를 모두 다 가져야 하는 것은 아님)
     *          1. 필드(field)
     *              1. 클래스가 가지고 있는 구체적인 정보를 담는 일종의 변수
     *              2. 변수 선언하듯이 선언하여 사용
     *          2. 생성자(constructor)
     *              1. 해당 클래스를 객체로 선언하기 위한 규칙
     *              2. 생성자의 이름은 클래스이름과 동일하며 소괄호안에 매개변수를 작성할 수 있음.
     *              3. 생성자를 별도로 정의하지 않으면 기본 생성자를 사용할 수 있음.
     *              4. 기본 생성자가 아닌 매개변수가 있는 생성자만 정의한다면 기본생성자를 사용할 수 없음.
     *                  a. 기본생성자가 필요하다면 추가로 선언해야함
     *
     *                 // Student 클래스
     *                 public class Student{
     *                      // 기본생성자
     *                      public Student(){
     *
     *                      }
     *                  }
     *          3. 메서드(method)
     *              1. 해당 클래스가 제공하는 기능을 정의한 코드블록
     *              2. 보통 메서드 하나는 하나의 기능을 수행하도록 함.
     *              3. 이름은 변수이름 규칙을 따르며, 마음대로 정할 수 있음.
     *              4. 매개변수, 리턴을 가질 수 있음.
     *                  a.매개변수(parameter)
     *                      1. 해당 메서드를 호출할 때 넘겨줄 데이터
     *                      2. 일종의 입력 데이터
     *                      3. 갯수에 제한은 없음.
     *                  b.리턴(return)
     *                      1. 해당 메서드가 끝났을 때 호출한 곳으로 넘겨줄 데이터
     *                      2. 일종의 출력 데이터
     *                      3. 어떤 타입이든 하나만 리턴할 수 있음.
     *        2.객체선언 문법
     *          [객체로 선언할 클래스 이름] [객체로 지정할 이름(마음대로)] = new [객체로 선언할 클래스의 생성자];
     */
}
